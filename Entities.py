import mathfrom OpenGL.GL import *from OpenGL.GLU import *from agk.vector3 import Vector3from Objects3d import MovingRigidColorMeshfrom States import StateMachine, StateFlockTravelclass Goat( MovingRigidColorMesh ):    def __init__(self, *args):        super(Goat, self).__init__( *args[-6:] )        self.type = "goat"        self.separationdist = 10.0        self.alignmentdist = 13.0        self.cohesiondist = 11.0        self.separationforce = 1.8        self.alignmentforce = 0.6        self.cohesionforce = 1.0        #self.state = None        self.brain = StateMachine()        self.brain.add_state( StateFlockTravel(self) )        self.brain.set_initial_state( "exploring" )        # optimisation flags        self._should_turn = False    def update(self, TimeDelay, Boids):        acceleration = self.brain.think( Boids )        if acceleration:            acceleration = acceleration.get_projected( Vector3(self.matrix.y_axis) )            self.velocity += acceleration            #self.velocity = misc.get_vec_projected( self.velocity, myup )            if self.velocity.length > self.movement_speed:                self.velocity.set_length( self.movement_speed )            self._should_turn = True        if self._should_turn:            updated = self.update_rotation( TimeDelay )            if updated is False:                self._should_turn = False        """        glLineWidth(20)        glBegin(GL_LINES)        if acceleration:            glColor( (1.0, 0.0, 0.0) )            glVertex3fv( tuple(self.location) )            glVertex3fv( tuple(self.location + acceleration*5) )        glColor( (0.0, 1.0, 0.0) )        glVertex3fv( tuple(self.location)  )        glVertex3fv( tuple(self.location + self.velocity*5) )        glEnd()        """        self.update_position(TimeDelay)        self.update_matrix()        return