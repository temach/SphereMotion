import mathimport randomimport os.pathfrom OpenGL.GL import *from OpenGL.GLU import *import pygamefrom pygame.locals import *from agk.matrix44 import Matrix44from agk.vector3 import Vector3import itertools#Import my stuffimport Readers3dimport Objects3dclass ModelCollection(dict):    planet_path = "models/inside_world.obj"    goat_path = "models/goat.obj"    def __init__(self):        self.file_paths = [self.planet_path, self.goat_path]        dict.__init__(self)        self.fill_collection()    def fill_collection(self):        basename = os.path.basename     # shortcut, (supposed to help with speed)        for fpath in self.file_paths:            reader = Readers3d.ReadOBJ( fpath )            model_type = basename(fpath).replace(".obj", "", 1)            self[ model_type ] = readerclass PointsCollection(dict):    goat_positions = "maps/goat_positions.obj"    def __init__(self):        self.file_paths = [ self.goat_positions ]        dict.__init__(self)        self.fill_collection()    def fill_collection(self):        basename = os.path.basename     # shortcut        for fpath in self.file_paths:            reader = Readers3d.ReadPoints( fpath )            purpose = basename(fpath).replace(".obj", "", 1)            self[ purpose ] = readerclass cls_Map(object):    def __init__(self):        self.models = ModelCollection()        self.points = PointsCollection()        self.mesh_display_list = None        self.mesh_objects = {}        self.updating_objects = {}        self.make_level()    def make_level(self):        planet = self.make_planet()        self.mesh_objects[ planet.id ] = planet        #for p in self.points["goat_positions"]:            #print p    def make_planet(self):        matrix = Matrix44.scale(0.8, 0.8, 0.8)        model = self.models["inside_world"]        color = (0.5, 0.78, 1.0)        planet = Objects3d.ColorMesh( matrix, model, color )        return planet    def make_goats(self):        print "making a goat"    def render(self):        if self.mesh_display_list is None:            #get all_objects's vertices and faces and normals and colours            self.mesh_display_list = self.create_display_list()        glCallList(self.mesh_display_list)    def create_display_list(self):        some_list_id = glGenLists(1)        glNewList(some_list_id, GL_COMPILE)        self.draw_objects( self.mesh_objects.values() )        glEndList()        return some_list_id    def draw_objects(self, things):        glBegin(GL_TRIANGLES)        for object in things:            object.apply_matrix()            object.draw_in_series()        glEnd()